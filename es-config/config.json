GET /_cat/nodes?v
GET /_cat/indices?v
GET /_cat/health?v

GET /bank/account/0

DELETE /bank
PUT /bank
{
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 1
  }
}

PUT /shakespeare
{
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 1
  },
  "mappings": {
    "properties": {
      "speaker": {
        "type": "keyword"
      },
      "play_name": {
        "type": "keyword"
      },
      "line_id": {
        "type": "integer"
      },
      "speech_number": {
        "type": "integer"
      }
    }
  }
}

GET /index-1/_doc/1

PUT /index-1/_doc/1
{
  "Firstname": "Myles",
  "Lastname": "Young"
}

POST /index-1/_update/1
{
    "script" : {
        "source": "ctx._source.Firstname.add(params.name)",
        "lang": "painless",
        "params" : {
            "name" : "Micah"
        }
    }
}

PUT /shakespeare
{
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 1
  },
  "mappings": {
    "properties": {
      "speaker": {
        "type": "keyword"
      },
      "play_name": {
        "type": "keyword"
      },
      "line_id": {
        "type": "integer"
      },
      "speech_number": {
        "type": "integer"
      }
    }
  }
}

PUT /shakespeare/_alias/Henry
{
  "filter": {
    "term": {
      "play_name": "Henry IV"
    }
  }
}

PUT _template/template_1
{
  "index_patterns": "log-*",
  "aliases": {
    "gen_log": {},
    "my_log": {
      "filter": {
        "term": {
          "FIELD": "VALUE"
        }
      }
    }
  },
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 1
  },
  "mappings": {
    "properties": {
      "host_name": {
        "type": "keyword"
      },
      "created_at": {
        "type": "date",
        "format": "EEE MMM dd HH:mm:ss Z yyyy"
      }
    }
  }
}

PUT /logs_20302801
{
  "mappings": {
    "properties": {
      "year": {
        "type": "integer"
      }
    }
  },
  "aliases": {
    "2030": {
      "filter": {
        "term": {
          "year": 2030
        }
      }
    },
    "current_day": {}
  }
}

PUT /index-4
{
  "aliases": {
    "index": {},
    "index2": {
        "filter": {
            "term": {
                "some_field": "value"
            }
        }
    }
  },
  "mappings": {
    "properties": {
      "firstname": {
        "type": "keyword"
      },
      "lastname": {
        "type": "keyword"
      },
      "summary": {
        "type": "text"
      },
      "age": {
        "type": "short"
      },
      "is_subscribed": {
        "type": "boolean"
      },
      "geo": {
        "type": "geo_point"
      },
      "last_modified": {
        "type": "date"
      },
      "percent_complete": {
        "type": "scaled_float",
        "scaling_factor": 100
      }
    }
  },
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 1
  }
}

POST _analyze
{
  "analyzer": "standard",
  "text": "The 3 QUICK Browned-Foxes jumped over the neighbor's fence."
}

POST _analyze
{
  "analyzer": "simple",
  "text": "The 3 QUICK Browned-Foxes jumped over the neighbor's fence."
}

POST _analyze
{
  "analyzer": "english",
  "text": "The 3 QUICK Browned-Foxes jumped over the neighbor's fence."
}

PUT /index-5
{
  "mappings": {
    "properties": {
      "text": {
        "type": "text",
        "fields": {
          "simple": {
            "type": "text",
            "analyzer": "simple"
          },
          "whitespace": {
            "type": "text",
            "analyzer": "whitespace"
          },
          "english": {
            "type": "text",
            "analyzer": "english"
          }
        }
      }
    }
  }
}

PUT /index-5/_doc/1
{
  "text": "The 3 QUICK Browned-Foxes jumped over the neighbor's fence."
}

GET /index-5/_search
{
  "query": {
    "match": {
      "text.english": "fox"
    }
  }
}

PUT index-6
{
  "settings": {
    "analysis": {
      "analyzer": {
        "whitespace_lowercase": {
          "tokenizer": "whitespace",
          "filter": ["lowercase"]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "text": {
        "type": "text",
        "analyzer": "whitespace_lowercase"
      }
    }
  }
}

PUT index-6/_doc/1
{
  "text": "The 3 QUICK Browned-Foxes jumped over the neighbor's fence."
}

GET index-6/_search
{
  "query": {
    "match": {
      "text": "quick"
    }
  }
}

PUT index-7
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "type": "custom",
          "char_filter": [
            "emoji"
          ],
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "english_stop"
          ]
        }
      },
      "char_filter": {
        "emoji": {
          "type": "mapping",
          "mapping": [
            ":) => :happy:",
            ":( => :sad:"
          ]
        }
      },
      "filter": {
        "english_stop": {
          "type": "stop",
          "stopwords": "_english_"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "text": {
        "type": "text",
        "analyzer": "my_analyzer"
      }
    }
  }
}

PUT index-8
{
  "mappings": {
    "properties": {
      "field-1": {
        "type": "text",
        "fields": {
          "simple": {
            "type": "text",
            "analyzer": "simple"
          },
          "english": {
            "type": "text",
            "analyzer": "english"
          },
          "keyword": {
            "type": "keyword",
            "ignore_above": 256
          }
        }
      }
    }
  }
}

PUT index-9/_doc/1
{
  "geo": {
    "ip": "10.0.0.1",
    "coordinates": {
      "lat": "some_number",
      "long": "some_number"
    },
    "country": "United States",
    "state": "Virginia",
    "city": "Richmond"
  }
}

GET index-10
DELETE index-10

PUT index-10
{
  "mappings": {
    "properties": {
      "group": {
        "type": "keyword"
      },
      "user": {
        "type": "nested"
      }
    }
  }
}

PUT index-10/_doc/1
{
  "group": "LA students",
  "user": [
    {
      "first": "Myles",
      "last": "Young",
      "username": "myles.young@la.com"
    },
    {
      "first": "Terry",
      "last": "Cox",
      "username": "terry.cox@la.com"
    }
  ]
}

// snapshot and backup
GET _cat/indices?v

PUT _snapshot/my_repo
{
  "type": "fs",
  "settings": {
    "location": "/data/snapshot"
  }
}

PUT /snaptest_index
{
  "settings": {
    "number_of_shards": 1,
    "number_of_replicas": 0
  }
}

PUT _snapshot/my_repo/shakespeare_1?wait_for_completion
{
  "indices": "shakespeare",
  "include_global_state": false
}

GET _snapshot/my_repo/shakespeare_1

POST _snapshot/my_repo/shakespeare_1?wait_for_completion
{
  "indices": "shakespeare",
  "rename_patern": "(.+)",
  "rename_replacement": "$1_testing"
}

// hot/warm architecture
PUT hot
{
  "settings": {
    "index.routing.allocation.require.temp": "hot"
  }
}

PUT warm
{
  "settings": {
    "index.routing.allocation.require.temp": "warm"
  }
}

GET _cat/shards/warm?v

// Shard Allocation Awareness and Forced Awareness for an index

GET _cluster/settings
{
  "persistent": {
    "cluster.routing.allocation.awareness.attributes": "zone",
    "cluster.routing.allocation.awareness.force.zone.value": "1,2,3"
  }
}

// diagnose shard issues and repair cluster's health
GET _cat/allocation/index_name
GET _cat/shards/index_name

PUT index_name
{
  "settings": {
    "number_of_replicas": 1,
    "number_of_shards": 0,
    "index.routing.allocation.exclude._name": "data1,data2"
  }
}

GET _cluster/allocation/explain
{
  "index": "index_name",
  "shard": shard_number,
  "primary": true
}

PUT index_name/_settings
{
  "index.routing.allocation.require._name": "data1"
}

// Term query

GET shakespeare/_search
{
  "query": {
    "term": {
      "play_name": {
        "value": "Othello"
      }
    }
  }
}

GET shakespeare/_search
{
  "query": {
    "terms": {
      "play_name": [
        "Othello",
        "Romeo and Juliet"
      ]
    }
  }
}

GET shakespeare/_search
{
  "query": {
    "range": {
      "speech_number": {
        "gte": 10,
        "lte": 35
      }
    }
  }
}

GET shakespeare/_search
{
  "query": {
    "range": {
      "date": {
        "gte": "01/01/2000",
        "lte": "01/12/2000",
        "format": "dd/MM/yyyy||yyyy"
      }
    }
  }
}

// Full-text query
GET shakespeare/_search
{
  "query": {
    "match": {
      "text_entry": "where art thou"
    }
  }
}

GET shakespeare/_search
{
  "query": {
    "match_phrase": {
      "text_entry": "where art thou"
    }
  }
}

GET shakespeare/_search
{
  "query": {
    "multi_match": {
      "query": "some_query",
      "fields": ["field1", "field2"]
    }
  }
}

// Boolean search
GET bank/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "gender.keyword": {
              "value": "F",
              "_name": "gender"
            }
          }
        }
      ],
      "must_not": [
        {
          "term": {
            "state.keyword": {
              "value": "RI",
              "_name": "state"
            }
          }
        }
      ],
      "should": [
        {
          "term": {
            "lastname.keyword": {
              "value": "Meyers",
              "_name": "lastname_1"
            }
          }
        },
        {
          "term": {
            "lastname": {
              "value": "Owens",
              "_name": "lastname_2"
            }
          }
        }
      ],
      "minimum_should_match": 1,
      "filter": {
        "term": {
          "city.keyword": "Jacksonburg"
        }
      }
    }
  }
}

// sort result of the query
GET bank/_search
{
  "query": {
    "term": {
      "state.keyword": {
        "value": "VA"
      }
    }
  },
  "sort": [
    {
      "age": {
        "order": "desc"
      }
    },
    {
      "balance": {
        "order": "desc"
      }
    }
  ]
}

// pagination of the query's result
GET shakespeare/_search?size=20&from=0
{
  "query": {
    "term": {
      "play_name": {
        "value": "Antony and Cleopatra"
      }
    }
  }
}

// scroll API
GET shakespeare/_search?scroll?scroll=10m
{
  "slice": {
    "id": 0,
    "max": 10
  },
  "query": {
    "match_all": {}
  }
}

GET shakespeare/_search?scroll?scroll=10m
{
  "slice": {
    "id": 1,
    "max": 10
  },
  "query": {
    "match_all": {}
  }
}

GET shakespeare/_search?scroll=10m
{
  "size": 10000
}

GET /_search/scroll
{
  "scroll": "10m",
  "scroll_id": "DnF1ZXJ5VGhlbkZldGNoAgAAAAAAABy4FkJKMmg0R0JDU3dTRW85TlZKaDRpcHcAAAAAAAAcuRZCSjJoNEdCQ1N3U0VvOU5WSmg0aXB3"
}

DELETE _search/scroll/_all

// fuzziness
GET shakespeare/_search
{
  "query": {
    "fuzzy": {
      "text_entry": {
        "value": "saken",
        "fuzziness": 1,
        "prefix_length": 1,
        "max_expansions": 50,
        "transpositions": true
      }
    }
  }
}

// Bucket Aggregation
GET logs/_search
{
  "size": 0,
  "aggs": {
    "request_per_day": {
      "date_histogram": {
        "field": "@timestamp",
        "interval": "year"
      }
    }
  }
}

GET logs/_search
{
  "size": 0,
  "aggs": {
    "response_codes": {
      "terms": {
        "field": "response.keyword",
        "size": 10
      }
    }
  }
}

// Metric Aggregation
GET logs/_search
{
  "size": 0,
  "aggs": {
    "average_byte" {
      "avg": {
        "field": "bytes"
      }
    }
  }
}

GET logs/_search
{
  "size": 0,
  "aggs": {
    "sum_of_bytes": {
      "sum": {
        "field": "bytes"
      }
    }
  }
}

GET logs/_search
{
  "size": 0,
  "aggs": {
    "unique_clients": {
      "cardinality": {
        "field": "clientip.keyword"
      }
    }
  }
}

// Nested Aggregation
GET logs/_search
{
  "size": 0,
  "aggs": {
    "clients_per_day": {
      "date_histogram": {
        "field": "@timestamp",
        "interval": "day"
      },
      "aggs": {
        "unique_clients": {
          "cardinality": {
            "field": "clientip.keyword"
          }
        }
      }
    }
  }
}

GET logs/_search
{
  "size": 0,
  "aggs": {
    "extension": {
      "terms": {
        "field": "extension.keyword",
        "size": 10,
        "order": {
          "average_bytes": "desc"
        }
      },
      "aggs": {
        "average_bytes": {
          "avg": {
            "field": "bytes"
          }
        }
      }
    }
  }
}

// Pipeline aggreagation
// parent
GET logs/_search
{
  "size": 0,
  "aggs": {
    "bytes_per_hour": {
      "date_histogram": {
        "field": "@timestamp",
        "interval": "hour"
      },
      "aggs": {
        "sum_of_bytes": {
          "sum": {
            "field": "bytes"
          }
        },
        "cumulative_bytes": {
          "cumulative_sum": {
            "buckets_path": "sum_of_bytes"
          }
        },
        "bytes_per_second": {
          "derivative": {
            "buckets_path": "cumulative_bytes",
            "unit": "second"
          }
        }
      }
    }
  }
}

// siblings
GET logs/_search
{
  "size": 0,
  "aggs": {
    "client_per_hour": {
      "date_histogram": {
        "field": "@timestamp",
        "interval": "hour"
      },
      "aggs": {
        "unique_clients": {
          "cardinality": {
            "field": "clientip.keyword"
          }
        }
      }
    },
    "max": {
      "max_bucket": {
        "buckets_path": "client_per_hour>unique_clients"
      }
    }
  }
}